// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id       String   @id @unique @default(cuid())
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  name          String
  phone         String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String? //* Optional bởi vì đăng nhập OAUth sẽ không cần password

  isEnabledTwoFactorAuth Boolean @default(false) //* Mặc định user sẽ không login 2 lớp, bật tính năng này trong setting

  role                  UserRole               @default(USER)
  Account               Account[] //* quan hệ one-to-many
  TwoFactorConfirmation TwoFactorConfirmation? //* Quan hệ one-to-one
}

model Account {
  id                String  @id @unique @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId]) //* Unique rule của Account là 1 unique provider chỉ tương ứng với 1 unique providerAccountId 
}

model VerificationToken {
  //todo: Đại diện cho 1 form xác thực cần nhập verificationToken
  id      String   @id @unique @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token]) //* Unique rule của VerificationToken là 1 unique email chỉ tương ứng với 1 unique token
}

model ResetPasswordToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId]) //* Bởi vì TwoFactorConfirmation và User là quan hệ one-to-one nên phải set Unique
}

model UpdateToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}
